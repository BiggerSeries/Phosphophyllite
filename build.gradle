buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

version = "${majorVersion}.${minorVersion}.${patchVersion}"
if (!"${postfix}".isEmpty()) {
    version += "-${postfix}"
    if (!"$postfixMajorVersion".isEmpty()) {
        version += ".${postfixMajorVersion}"
        if (!"$postfixMinorVersion".isEmpty()) {
            version += ".${postfixMinorVersion}"
        }
    }
}

group = 'net.roguelogix.phosphophyllite'
archivesBaseName = "phosphophyllite-${mc_version}"

// allows you to override phos's forge version, just have to use the same key i use
forge_version = project.rootProject.property("forge_version")

setProperty("compatibility", "[" + version + ", ${majorVersion}." + ("${minorVersion}".toInteger() + 1).toString() + ".${patchVersion}-alpha)")
if (version.contains("alpha") || version.contains("beta")) {
    def nextIncompatibleVersion = "${majorVersion}.${minorVersion}.${patchVersion}-${postfix}"
    if (!"$postfixMajorVersion".isEmpty()) {
        nextIncompatibleVersion += "." + ("${postfixMajorVersion}".toInteger() + 1).toString();
    } else {
        nextIncompatibleVersion += ".1"
    }
    setProperty("compatibility", "[" + version + ", " + nextIncompatibleVersion + ")")
}

minecraft {
    mappings channel: "${mapping_channel}", version: "${mapping_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            arg "-mixin.config=phosphophyllite.mixins.json"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                Phosphophyllite {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                Phosphophyllite {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

//            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                Phosphophyllite {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

mixin {
    add sourceSets.main, "phosphophyllite.refmap.json"
    config 'phosphophyllite.mixins.json'
}

repositories {
//    maven {
//        name = "CurseForge"
//        url = "https://minecraft.curseforge.com/api/maven/"
//    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url =  'https://modmaven.dev/'
    }
    maven { url "https://nexus.resourcefulbees.com/repository/maven-public/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

//    compileOnly fg.deobf('curse.maven:tita-287342:3346366')
//    compileOnly fg.deobf('curse.maven:ifag-266515:3386008')
//    runtimeOnly fg.deobf('curse.maven:pipz-443900:3920730')
//    runtimeOnly fg.deobf('curse.maven:meka-268560:4041164')
//    runtimeOnly fg.deobf('curse.maven:wand-399558:3926815')

    compileOnly "mekanism:Mekanism:1.19.2-10.3.5.474:api"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Phosphophyllite",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "phosphophyllite.mixins.json",
        ])
    }
}

gradle.projectsEvaluated {
    def resource_targets = ["META-INF/mods.toml", "pack.mcmeta"]
    def into_targets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
    def properties = [
            version     : version,
            fmlVersion  : forge_version.substring(0, forge_version.indexOf('.')),
            forgeVersion: forge_version,
            mcVersion   : mc_version
    ]
    processResources {
        duplicatesStrategy = 'INCLUDE'
        inputs.properties properties

        def spec = copySpec {
            from(sourceSets.main.resources) {
                include resource_targets
                expand properties
            }
        }

        with spec
        into_targets.each {
            def file = file(it)
            if (file.exists()) {
                copy {
                    with spec
                    into file
                }
            }
        }

        from(sourceSets.main.resources) {
            exclude resource_targets
        }
    }
}

//publish.dependsOn('reobfJar')

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

def ENV = System.getenv()
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
            artifact sourcesJar
        }
    }

    repositories {
        maven {
            url = "https://nexus.resourcefulbees.com/repository/roguelogix/"
            credentials {
                username ENV.RESOURCEFUL_MAVEN_USER
                password ENV.RESOURCEFUL_MAVEN_PASS
            }
        }
    }
}