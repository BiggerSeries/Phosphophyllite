plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.+'
    id 'net.neoforged.gradle.mixin' version '7.0.+'
}

version = "${majorVersion}.${minorVersion}.${patchVersion}"
if (!"${postfix}".isEmpty()) {
    version += "-${postfix}"
    if (!"$postfixMajorVersion".isEmpty()) {
        version += ".${postfixMajorVersion}"
        if (!"$postfixMinorVersion".isEmpty()) {
            version += ".${postfixMinorVersion}"
        }
    }
}

group = 'net.roguelogix.phosphophyllite'

base {
    archivesName = "${mod_id}-${mc_version}"
}

// use neo version from root project, may not match local project version, usually does
neo_version = project.rootProject.property("neo_version")

setProperty("compatibility", "[" + version + ", ${majorVersion}." + ("${minorVersion}".toInteger() + 1).toString() + ".0-alpha)")
if (version.contains("alpha") || version.contains("beta")) {
    def nextIncompatibleVersion = "${majorVersion}.${minorVersion}.${patchVersion}-${postfix}"
    if (!"$postfixMajorVersion".isEmpty()) {
        nextIncompatibleVersion += "." + ("${postfixMajorVersion}".toInteger() + 1).toString();
    } else {
        nextIncompatibleVersion += ".1"
    }
    setProperty("compatibility", "[" + version + ", " + nextIncompatibleVersion + ")")
}

if (!"$preReleasePostfix".isEmpty()) {
    version += "-${preReleasePostfix}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

accessTransformers {
    file 'src/main/resources/META-INF/accesstransformer.cfg'
}

runs {
    configureEach {
        workingDirectory project.file("run/${it.name}")

        systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = 'https://modmaven.dev/'
    }
    maven { url "https://nexus.resourcefulbees.com/repository/maven-public/" }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "mekanism:Mekanism:1.19.2-10.3.5.474:api"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : mc_version,
            neo_version         : neo_version,
            loader_version      : loader_version,
            version             : version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "BiggerSeries",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "BiggerSeries",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.named('publish').configure {
    dependsOn 'reobfJar'
    mustRunAfter 'reobfJar'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url = "https://nexus.resourcefulbees.com/repository/roguelogix/"
            credentials {
                def ENV = System.getenv()
                username ENV.RESOURCEFUL_MAVEN_USER
                password ENV.RESOURCEFUL_MAVEN_PASS
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}