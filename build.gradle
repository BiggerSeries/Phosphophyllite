plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${majorVersion}.${minorVersion}.${patchVersion}"
if (!"${postfix}".isEmpty()) {
    version += "-${postfix}"
    if (!"$postfixMajorVersion".isEmpty()) {
        version += ".${postfixMajorVersion}"
        if (!"$postfixMinorVersion".isEmpty()) {
            version += ".${postfixMinorVersion}"
        }
    }
}

group = 'net.roguelogix.phosphophyllite'

base {
    archivesName = "phosphophyllite-${mc_version}"
}

neo_version = project.rootProject.property("neo_version")
setProperty("compatibility", "[" + version + ", ${majorVersion}." + ("${minorVersion}".toInteger() + 1).toString() + ".${patchVersion}-alpha)")
if (version.contains("alpha") || version.contains("beta")) {
    def nextIncompatibleVersion = "${majorVersion}.${minorVersion}.${patchVersion}-${postfix}"
    if (!"$postfixMajorVersion".isEmpty()) {
        nextIncompatibleVersion += "." + ("${postfixMajorVersion}".toInteger() + 1).toString();
    } else {
        nextIncompatibleVersion += ".1"
    }
    setProperty("compatibility", "[" + version + ", " + nextIncompatibleVersion + ")")
}

if (!"$preReleasePostfix".isEmpty()) {
    version += "-${preReleasePostfix}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file("run/${it.name}")

            property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "phosphophyllite.refmap.json"
    config 'phosphophyllite.mixins.json'
}

repositories {
    maven {
        url = 'https://modmaven.dev/'
    }
    maven { url "https://nexus.resourcefulbees.com/repository/maven-public/" }
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${neo_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly "mekanism:Mekanism:1.19.2-10.3.5.474:api"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version: mc_version,
            neo_version      : neo_version,
            loader_version   : neo_version.substring(0, neo_version.indexOf('.')),
            version          : version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "BiggerSeries",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "BiggerSeries",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.named('publish').configure {
    dependsOn 'reobfJar'
    mustRunAfter 'reobfJar'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url = "https://nexus.resourcefulbees.com/repository/roguelogix/"
            credentials {
                def ENV = System.getenv()
                username ENV.RESOURCEFUL_MAVEN_USER
                password ENV.RESOURCEFUL_MAVEN_PASS
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
